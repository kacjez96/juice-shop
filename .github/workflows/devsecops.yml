name: DevSecOps Pipeline (Build & Scan)

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # --- ETAP 1: BUILD ---
  # Ten jeden job reprezentuje ca≈Çy etap "build".
  build-docker-image:
    name: Stage 1 - Build Docker Image
    runs-on: ubuntu-latest
    # Uprawnienia do zapisu obrazu w rejestrze kontener√≥w GitHub
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Logowanie do GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Budowanie obrazu z oryginalnego Dockerfile i wypchniƒôcie do GHCR
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # Obraz bƒôdzie dostƒôpny pod adresem: ghcr.io/TWOJA_NAZWA/NAZWA_REPO:latest
          tags: ghcr.io/${{ github.repository }}:latest

  # --- ETAP 2: SCAN ---
  # Wszystkie poni≈ºsze joby zale≈ºƒÖ od `build-docker-image` i uruchomiƒÖ siƒô r√≥wnolegle.

  sca-scan:
    name: Stage 2 - SCA Scan (NPM Audit)
    runs-on: ubuntu-latest
    needs: build-docker-image # Zale≈ºy od zako≈Ñczenia etapu 'build'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # U≈ºywamy wersji Node.js zgodnej z oryginalnym Dockerfile (v20 jest bezpiecznym wyborem)
          node-version: '20'
      - name: Install dependencies
        run: npm install
      - name: Run NPM Audit for High/Critical issues
        run: npm audit --audit-level=high
        continue-on-error: true # Nie przerywaj pipeline'u po znalezieniu podatno≈õci

  sast-scan:
    name: Stage 2 - SAST Scan (Semgrep)
    runs-on: ubuntu-latest
    needs: build-docker-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep with verbose output
        run: |
          echo "üîç Starting Semgrep SAST scan with verbose output..."
          echo "=================================================="

          # Uruchom Semgrep z verbose i kolorowym outputem
          semgrep --config=auto \
                  --verbose \
                  --no-error \
                  --force-color \
                  || true

          echo "=================================================="
          echo "üîç Detailed scan with severity breakdown:"
          echo "=================================================="

          # Poka≈º tylko HIGH i CRITICAL z wiƒôkszymi szczeg√≥≈Çami
          semgrep --config=auto \
                  --severity=WARNING,ERROR \
                  --verbose \
                  --no-error \
                  --force-color \
                  || true

      - name: Run Semgrep and show summary
        run: |
          echo "=================================================="
          echo "üìä SAST Scan Summary:"
          echo "=================================================="

          # Uruchom z JSON aby policzyƒá, ale poka≈º te≈º w konsoli
          semgrep --config=auto --json -o /tmp/results.json || true

          if [ -f /tmp/results.json ]; then
            TOTAL=$(jq '.results | length' /tmp/results.json)
            HIGH=$(jq '[.results[] | select(.extra.severity == "WARNING")] | length' /tmp/results.json)
            CRITICAL=$(jq '[.results[] | select(.extra.severity == "ERROR")] | length' /tmp/results.json)

            echo "üìà Total findings: $TOTAL"
            echo "‚ö†Ô∏è  High severity: $HIGH"
            echo "üö® Critical severity: $CRITICAL"
            echo ""
            echo "üîù Top 5 Critical Issues:"
            echo "------------------------"

            # Wy≈õwietl top 5 krytycznych z detalami
            jq -r '.results[] | select(.extra.severity == "ERROR") | 
              "‚ùå \(.check_id)\n   File: \(.path):\(.start.line)\n   Message: \(.extra.message)\n   Fix: \(.extra.fix // "No automated fix available")\n"' \
              /tmp/results.json | head -20

            echo ""
            echo "‚ö†Ô∏è  Top 5 High Issues:"
            echo "------------------------"

            jq -r '.results[] | select(.extra.severity == "WARNING") | 
              "‚ö†Ô∏è  \(.check_id)\n   File: \(.path):\(.start.line)\n   Message: \(.extra.message)\n"' \
              /tmp/results.json | head -20
          fi

          echo "=================================================="
          echo "‚úÖ SAST scan completed!"

  secrets-scan:
    name: Stage 2 - Secrets Scan (GitLeaks)
    runs-on: ubuntu-latest
    needs: build-docker-image
    # Job zosta≈Ç zaktualizowany, aby u≈ºywaƒá GitLeaks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # GitLeaks potrzebuje pe≈Çnej historii do skanowania
        with:
          fetch-depth: 0
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          # Token jest potrzebny do przesy≈Çania wynik√≥w jako SARIF do zak≈Çadki Security
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dast-scan:
    name: Stage 2 - DAST Scan (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: build-docker-image # Zale≈ºy od zako≈Ñczenia etapu 'build'
    # Uprawnienia do odczytu obrazu z rejestru kontener√≥w GitHub
    permissions:
      packages: read
      issues: write
      contents: read
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and run the application container
        run: |
          echo "Pulling image from ghcr.io/${{ github.repository }}:latest"
          docker pull ghcr.io/${{ github.repository }}:latest
          echo "Starting container in background..."
          # Uruchamiamy kontener w tle (-d) i mapujemy port 3000
          docker run -d --name juice-shop -p 3000:3000 ghcr.io/${{ github.repository }}:latest

      - name: Wait for application to be ready
        run: |
          echo "Waiting 30 seconds for the application to start..."
          sleep 30
          echo "Checking if the container is running..."
          docker ps
          echo "Checking application logs..."
          docker logs juice-shop

      - name: Run ZAP Baseline Scan against the running container
        uses: zaproxy/action-baseline@v0.7.0
        with:
          # Skanujemy aplikacjƒô dostƒôpnƒÖ na localhost w ≈õrodowisku runnera
          target: 'http://localhost:3000'
          fail_action: false # Nie przerywaj pipeline'u
          format: html
          report: zap_report.html

      - name: Upload ZAP Scan Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-report
          path: zap_report.html
